/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: SettingAndParam.proto */

#ifndef PROTOBUF_C_SettingAndParam_2eproto__INCLUDED
#define PROTOBUF_C_SettingAndParam_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "IdentityMsg.pb-c.h"
#include "Setting.pb-c.h"
#include "Parameter.pb-c.h"

typedef struct _Protocol__SettingAndParamReq Protocol__SettingAndParamReq;
typedef struct _Protocol__SettingAndParamRsp Protocol__SettingAndParamRsp;


/* --- enums --- */


/* --- messages --- */

struct  _Protocol__SettingAndParamReq
{
  ProtobufCMessage base;
  Protocol__IdentityMsg *iden;
};
#define PROTOCOL__SETTING_AND_PARAM_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__setting_and_param_req__descriptor) \
    , NULL }


struct  _Protocol__SettingAndParamRsp
{
  ProtobufCMessage base;
  Protocol__IdentityMsg *iden;
  /*
   * 配置信息
   */
  Protocol__Setting *settinginfo;
  /*
   * 参数信息
   */
  Protocol__Parameter *parameterinfo;
};
#define PROTOCOL__SETTING_AND_PARAM_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__setting_and_param_rsp__descriptor) \
    , NULL, NULL, NULL }


/* Protocol__SettingAndParamReq methods */
void   protocol__setting_and_param_req__init
                     (Protocol__SettingAndParamReq         *message);
size_t protocol__setting_and_param_req__get_packed_size
                     (const Protocol__SettingAndParamReq   *message);
size_t protocol__setting_and_param_req__pack
                     (const Protocol__SettingAndParamReq   *message,
                      uint8_t             *out);
size_t protocol__setting_and_param_req__pack_to_buffer
                     (const Protocol__SettingAndParamReq   *message,
                      ProtobufCBuffer     *buffer);
Protocol__SettingAndParamReq *
       protocol__setting_and_param_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__setting_and_param_req__free_unpacked
                     (Protocol__SettingAndParamReq *message,
                      ProtobufCAllocator *allocator);
/* Protocol__SettingAndParamRsp methods */
void   protocol__setting_and_param_rsp__init
                     (Protocol__SettingAndParamRsp         *message);
size_t protocol__setting_and_param_rsp__get_packed_size
                     (const Protocol__SettingAndParamRsp   *message);
size_t protocol__setting_and_param_rsp__pack
                     (const Protocol__SettingAndParamRsp   *message,
                      uint8_t             *out);
size_t protocol__setting_and_param_rsp__pack_to_buffer
                     (const Protocol__SettingAndParamRsp   *message,
                      ProtobufCBuffer     *buffer);
Protocol__SettingAndParamRsp *
       protocol__setting_and_param_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__setting_and_param_rsp__free_unpacked
                     (Protocol__SettingAndParamRsp *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Protocol__SettingAndParamReq_Closure)
                 (const Protocol__SettingAndParamReq *message,
                  void *closure_data);
typedef void (*Protocol__SettingAndParamRsp_Closure)
                 (const Protocol__SettingAndParamRsp *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor protocol__setting_and_param_req__descriptor;
extern const ProtobufCMessageDescriptor protocol__setting_and_param_rsp__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_SettingAndParam_2eproto__INCLUDED */
