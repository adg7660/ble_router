/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: IdentityMsg.proto */

#ifndef PROTOBUF_C_IdentityMsg_2eproto__INCLUDED
#define PROTOBUF_C_IdentityMsg_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Protocol__IdentityMsg Protocol__IdentityMsg;


/* --- enums --- */


/* --- messages --- */

struct  _Protocol__IdentityMsg
{
  ProtobufCMessage base;
  /*
   * 鉴权Token: 由DeviceID和16位随机数使用CRC16_CCITT生成, 计算初值是0xFFFF
   */
  uint32_t msgtoken;
  /*
   * 消息ID
   */
  uint32_t msgindex;
  /*
   * 设备ID: 设备发送时必填, 服务器发送时可以不填
   */
  char *deviceid;
  /*
   * 返回结果状态: 请求包不填, 回应包必填, 0表示执行成功
   */
  protobuf_c_boolean has_rspcode;
  uint32_t rspcode;
};
extern char protocol__identity_msg__device_id__default_value[];
#define PROTOCOL__IDENTITY_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__identity_msg__descriptor) \
    , 0, 0, protocol__identity_msg__device_id__default_value, 0, 0u }


/* Protocol__IdentityMsg methods */
void   protocol__identity_msg__init
                     (Protocol__IdentityMsg         *message);
size_t protocol__identity_msg__get_packed_size
                     (const Protocol__IdentityMsg   *message);
size_t protocol__identity_msg__pack
                     (const Protocol__IdentityMsg   *message,
                      uint8_t             *out);
size_t protocol__identity_msg__pack_to_buffer
                     (const Protocol__IdentityMsg   *message,
                      ProtobufCBuffer     *buffer);
Protocol__IdentityMsg *
       protocol__identity_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__identity_msg__free_unpacked
                     (Protocol__IdentityMsg *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Protocol__IdentityMsg_Closure)
                 (const Protocol__IdentityMsg *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor protocol__identity_msg__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_IdentityMsg_2eproto__INCLUDED */
