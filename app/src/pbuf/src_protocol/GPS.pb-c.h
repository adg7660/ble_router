/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: GPS.proto */

#ifndef PROTOBUF_C_GPS_2eproto__INCLUDED
#define PROTOBUF_C_GPS_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "IdentityMsg.pb-c.h"

typedef struct _Protocol__GPSReq Protocol__GPSReq;
typedef struct _Protocol__Satellite Protocol__Satellite;
typedef struct _Protocol__GPS Protocol__GPS;


/* --- enums --- */


/* --- messages --- */

struct  _Protocol__GPSReq
{
  ProtobufCMessage base;
  /*
   * 身份验证
   */
  Protocol__IdentityMsg *iden;
  /*
   * gps信息
   */
  size_t n_gpsinfo;
  Protocol__GPS **gpsinfo;
  /*
   * 是否短信回传
   */
  protobuf_c_boolean has_sms;
  int32_t sms;
};
#define PROTOCOL__GPSREQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__gpsreq__descriptor) \
    , NULL, 0,NULL, 0, 0 }


struct  _Protocol__Satellite
{
  ProtobufCMessage base;
  /*
   * 卫星ID
   */
  int32_t id;
  /*
   * 仰角: 度, -1表示未知
   */
  protobuf_c_boolean has_elevation;
  int32_t elevation;
  /*
   * 方位角: 度, -1表示未知
   */
  protobuf_c_boolean has_azimuth;
  int32_t azimuth;
  /*
   * 信噪比, -1表示未知
   */
  protobuf_c_boolean has_snr;
  int32_t snr;
  /*
   * 是否用于定位: 0 - 否, 1 - 是
   */
  protobuf_c_boolean has_used;
  int32_t used;
  /*
   * 卫星类型: BD - 北斗, GP - GPS, GL - GLONASS, GN - 多系统
   */
  char *type;
};
extern char protocol__satellite__type__default_value[];
#define PROTOCOL__SATELLITE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__satellite__descriptor) \
    , 0, 0, -1, 0, -1, 0, -1, 0, 0, protocol__satellite__type__default_value }


struct  _Protocol__GPS
{
  ProtobufCMessage base;
  /*
   * 定位时间, unix时间戳
   */
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  /*
   * 纬度: 度, 精确到小数点后第7位, 定位失败为200
   */
  protobuf_c_boolean has_latitude;
  int32_t latitude;
  /*
   * 经度: 度, 精确到小数点后第7位, 定位失败为200
   */
  protobuf_c_boolean has_longitude;
  int32_t longitude;
  /*
   * 海拔高度: 米, 精确到小数点后2位
   */
  protobuf_c_boolean has_altitude;
  int32_t altitude;
  /*
   * 定位质量: 0 - 无定位, 1 - 普通定位, 2 - 差分定位, 6 - 粗略定位
   */
  protobuf_c_boolean has_quality;
  int32_t quality;
  /*
   * 定位模式: 2 - 2D,  3 - 3D
   */
  protobuf_c_boolean has_mode;
  int32_t mode;
  /*
   * 位置精确因子: 精确到小数点后2位
   */
  protobuf_c_boolean has_pdop;
  int32_t pdop;
  /*
   * 水平精确因子: 精确到小数点后2位
   */
  protobuf_c_boolean has_hdop;
  int32_t hdop;
  /*
   * 垂直精确因子: 精确到小数点后2位
   */
  protobuf_c_boolean has_vdop;
  int32_t vdop;
  /*
   * 用于定位的卫星数
   */
  protobuf_c_boolean has_satellitesused;
  int32_t satellitesused;
  /*
   * 发现的卫星数
   */
  protobuf_c_boolean has_satellitesinview;
  int32_t satellitesinview;
  /*
   * 速度: 米/秒, 精确到小数点后1位
   */
  protobuf_c_boolean has_speed;
  int32_t speed;
  /*
   * 航向: 度, 精确到小数点后1位
   */
  protobuf_c_boolean has_course;
  int32_t course;
  /*
   * 水平定位精确: 米, 精确到小数点后1位
   */
  protobuf_c_boolean has_hacc;
  int32_t hacc;
  /*
   * 垂直定位精确: 米, 精确到小数点后1位
   */
  protobuf_c_boolean has_vacc;
  int32_t vacc;
  /*
   * 定位耗时: 秒
   */
  protobuf_c_boolean has_fixtime;
  int32_t fixtime;
  /*
   * 卫星信息
   */
  size_t n_satellites;
  Protocol__Satellite **satellites;
};
#define PROTOCOL__GPS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__gps__descriptor) \
    , 0, 0u, 0, 2000000000, 0, 2000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL }


/* Protocol__GPSReq methods */
void   protocol__gpsreq__init
                     (Protocol__GPSReq         *message);
size_t protocol__gpsreq__get_packed_size
                     (const Protocol__GPSReq   *message);
size_t protocol__gpsreq__pack
                     (const Protocol__GPSReq   *message,
                      uint8_t             *out);
size_t protocol__gpsreq__pack_to_buffer
                     (const Protocol__GPSReq   *message,
                      ProtobufCBuffer     *buffer);
Protocol__GPSReq *
       protocol__gpsreq__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__gpsreq__free_unpacked
                     (Protocol__GPSReq *message,
                      ProtobufCAllocator *allocator);
/* Protocol__Satellite methods */
void   protocol__satellite__init
                     (Protocol__Satellite         *message);
size_t protocol__satellite__get_packed_size
                     (const Protocol__Satellite   *message);
size_t protocol__satellite__pack
                     (const Protocol__Satellite   *message,
                      uint8_t             *out);
size_t protocol__satellite__pack_to_buffer
                     (const Protocol__Satellite   *message,
                      ProtobufCBuffer     *buffer);
Protocol__Satellite *
       protocol__satellite__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__satellite__free_unpacked
                     (Protocol__Satellite *message,
                      ProtobufCAllocator *allocator);
/* Protocol__GPS methods */
void   protocol__gps__init
                     (Protocol__GPS         *message);
size_t protocol__gps__get_packed_size
                     (const Protocol__GPS   *message);
size_t protocol__gps__pack
                     (const Protocol__GPS   *message,
                      uint8_t             *out);
size_t protocol__gps__pack_to_buffer
                     (const Protocol__GPS   *message,
                      ProtobufCBuffer     *buffer);
Protocol__GPS *
       protocol__gps__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__gps__free_unpacked
                     (Protocol__GPS *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Protocol__GPSReq_Closure)
                 (const Protocol__GPSReq *message,
                  void *closure_data);
typedef void (*Protocol__Satellite_Closure)
                 (const Protocol__Satellite *message,
                  void *closure_data);
typedef void (*Protocol__GPS_Closure)
                 (const Protocol__GPS *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor protocol__gpsreq__descriptor;
extern const ProtobufCMessageDescriptor protocol__satellite__descriptor;
extern const ProtobufCMessageDescriptor protocol__gps__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_GPS_2eproto__INCLUDED */
