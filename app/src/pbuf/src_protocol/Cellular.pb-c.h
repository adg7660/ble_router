/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: Cellular.proto */

#ifndef PROTOBUF_C_Cellular_2eproto__INCLUDED
#define PROTOBUF_C_Cellular_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "IdentityMsg.pb-c.h"

typedef struct _Protocol__CellularReq Protocol__CellularReq;
typedef struct _Protocol__Cell Protocol__Cell;
typedef struct _Protocol__Cellular Protocol__Cellular;


/* --- enums --- */


/* --- messages --- */

struct  _Protocol__CellularReq
{
  ProtobufCMessage base;
  Protocol__IdentityMsg *iden;
  size_t n_cellularinfo;
  Protocol__Cellular **cellularinfo;
};
#define PROTOCOL__CELLULAR_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__cellular_req__descriptor) \
    , NULL, 0,NULL }


struct  _Protocol__Cell
{
  ProtobufCMessage base;
  /*
   * 基站ID
   */
  int32_t cellid;
  /*
   * 0 - 邻近小区, 1 - 服务小区
   */
  protobuf_c_boolean has_serving;
  int32_t serving;
  /*
   * 0 - 未定义, 2 - 2G, 3 - 3G, 4 - 4G
   */
  protobuf_c_boolean has_type;
  int32_t type;
  /*
   * 国家代码
   */
  protobuf_c_boolean has_mcc;
  int32_t mcc;
  /*
   * 运营商代码
   */
  protobuf_c_boolean has_mnc;
  int32_t mnc;
  /*
   * 基站代码: 2G
   */
  protobuf_c_boolean has_bsic;
  int32_t bsic;
  /*
   * 定位区域码: 2G/3G
   */
  protobuf_c_boolean has_lac;
  int32_t lac;
  /*
   * 定位区域码: 4G
   */
  protobuf_c_boolean has_tac;
  int32_t tac;
  /*
   * 频点
   */
  protobuf_c_boolean has_arfcn;
  int32_t arfcn;
  /*
   * 接收信号功率(dBm): 2G - RxLevel, 3G - RSCP, 4G - RSRP
   */
  protobuf_c_boolean has_rxlevel;
  int32_t rxlevel;
  /*
   * 接收信号质量(dBm): 2G - RxQuality, 3G - ECN0, 4G - RSRQ
   */
  protobuf_c_boolean has_rxquality;
  int32_t rxquality;
  /*
   * 接收信号强度(dBm)
   */
  protobuf_c_boolean has_rssi;
  int32_t rssi;
  /*
   * 物理基站ID: 4G
   */
  protobuf_c_boolean has_physcellid;
  int32_t physcellid;
};
#define PROTOCOL__CELL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__cell__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 0, 99, 0, 99, 0, 0 }


struct  _Protocol__Cellular
{
  ProtobufCMessage base;
  /*
   * 结束时间
   */
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  /*
   * 纬度: 度, 精度到小数点后第7位
   */
  protobuf_c_boolean has_latitude;
  int32_t latitude;
  /*
   * 经度: 度, 精度到小数点后第7位
   */
  protobuf_c_boolean has_longitude;
  int32_t longitude;
  /*
   * 基站信息
   */
  size_t n_cellinfo;
  Protocol__Cell **cellinfo;
  /*
   * TODO: 以下为诊断信息，内部使用
   */
  /*
   * 错误标志
   */
  protobuf_c_boolean has_errorflag;
  uint32_t errorflag;
  /*
   * 退出状态
   */
  protobuf_c_boolean has_exitflag;
  uint32_t exitflag;
  /*
   * 通信总耗时
   */
  protobuf_c_boolean has_totaltime;
  int32_t totaltime;
  /*
   * 硬件测试耗时
   */
  protobuf_c_boolean has_hwttime;
  int32_t hwttime;
  /*
   * SIM卡检测耗时
   */
  protobuf_c_boolean has_simtime;
  int32_t simtime;
  /*
   * 读电话号码耗时
   */
  protobuf_c_boolean has_numtime;
  int32_t numtime;
  /*
   * 信号检测耗时
   */
  protobuf_c_boolean has_rssitime;
  int32_t rssitime;
  /*
   * 注网耗时
   */
  protobuf_c_boolean has_registertime;
  int32_t registertime;
  /*
   * 附着GPRS耗时
   */
  protobuf_c_boolean has_attachtime;
  int32_t attachtime;
  /*
   * 激活移动场景耗时
   */
  protobuf_c_boolean has_pdptime;
  int32_t pdptime;
  /*
   * 连接耗时
   */
  protobuf_c_boolean has_connectiontime;
  int32_t connectiontime;
  /*
   * 数传耗时
   */
  protobuf_c_boolean has_communicationtime;
  int32_t communicationtime;
  /*
   * 发短信耗时
   */
  protobuf_c_boolean has_smstime;
  int32_t smstime;
  /*
   * 运营商代码
   */
  protobuf_c_boolean has_networkoperator;
  uint32_t networkoperator;
  /*
   * 信号强度
   */
  protobuf_c_boolean has_signalstrength;
  int32_t signalstrength;
  /*
   * 误码率
   */
  protobuf_c_boolean has_biterrorrate;
  int32_t biterrorrate;
  /*
   * 网络类型
   */
  protobuf_c_boolean has_radioaccesstechnology;
  int32_t radioaccesstechnology;
  /*
   * 内部温度: 摄氏度, 精确到小数点后一位
   */
  protobuf_c_boolean has_temperature;
  int32_t temperature;
  /*
   * 电池电压: 毫伏
   */
  protobuf_c_boolean has_batteryvoltage;
  int32_t batteryvoltage;
};
#define PROTOCOL__CELLULAR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__cellular__descriptor) \
    , 0, 0u, 0, 2000000000, 0, 2000000000, 0,NULL, 0, 0u, 0, 0u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/* Protocol__CellularReq methods */
void   protocol__cellular_req__init
                     (Protocol__CellularReq         *message);
size_t protocol__cellular_req__get_packed_size
                     (const Protocol__CellularReq   *message);
size_t protocol__cellular_req__pack
                     (const Protocol__CellularReq   *message,
                      uint8_t             *out);
size_t protocol__cellular_req__pack_to_buffer
                     (const Protocol__CellularReq   *message,
                      ProtobufCBuffer     *buffer);
Protocol__CellularReq *
       protocol__cellular_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__cellular_req__free_unpacked
                     (Protocol__CellularReq *message,
                      ProtobufCAllocator *allocator);
/* Protocol__Cell methods */
void   protocol__cell__init
                     (Protocol__Cell         *message);
size_t protocol__cell__get_packed_size
                     (const Protocol__Cell   *message);
size_t protocol__cell__pack
                     (const Protocol__Cell   *message,
                      uint8_t             *out);
size_t protocol__cell__pack_to_buffer
                     (const Protocol__Cell   *message,
                      ProtobufCBuffer     *buffer);
Protocol__Cell *
       protocol__cell__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__cell__free_unpacked
                     (Protocol__Cell *message,
                      ProtobufCAllocator *allocator);
/* Protocol__Cellular methods */
void   protocol__cellular__init
                     (Protocol__Cellular         *message);
size_t protocol__cellular__get_packed_size
                     (const Protocol__Cellular   *message);
size_t protocol__cellular__pack
                     (const Protocol__Cellular   *message,
                      uint8_t             *out);
size_t protocol__cellular__pack_to_buffer
                     (const Protocol__Cellular   *message,
                      ProtobufCBuffer     *buffer);
Protocol__Cellular *
       protocol__cellular__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__cellular__free_unpacked
                     (Protocol__Cellular *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Protocol__CellularReq_Closure)
                 (const Protocol__CellularReq *message,
                  void *closure_data);
typedef void (*Protocol__Cell_Closure)
                 (const Protocol__Cell *message,
                  void *closure_data);
typedef void (*Protocol__Cellular_Closure)
                 (const Protocol__Cellular *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor protocol__cellular_req__descriptor;
extern const ProtobufCMessageDescriptor protocol__cell__descriptor;
extern const ProtobufCMessageDescriptor protocol__cellular__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_Cellular_2eproto__INCLUDED */
