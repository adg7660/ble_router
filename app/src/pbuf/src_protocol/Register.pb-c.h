/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: Register.proto */

#ifndef PROTOBUF_C_Register_2eproto__INCLUDED
#define PROTOBUF_C_Register_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "IdentityMsg.pb-c.h"

typedef struct _Protocol__RegisterReq Protocol__RegisterReq;
typedef struct _Protocol__RegisterRsp Protocol__RegisterRsp;


/* --- enums --- */


/* --- messages --- */

struct  _Protocol__RegisterReq
{
  ProtobufCMessage base;
  Protocol__IdentityMsg *iden;
  char *imsi;
  char *imei;
  /*
   * 蓝牙MAC地址
   */
  char *mac;
  /*
   * 设备类型
   */
  protobuf_c_boolean has_devicetype;
  int32_t devicetype;
  /*
   * 硬件版本
   */
  protobuf_c_boolean has_hardwareversion;
  int32_t hardwareversion;
  /*
   * 固件版本
   */
  protobuf_c_boolean has_firmwareversion;
  int32_t firmwareversion;
  /*
   * 自检状态: 0 - 无异常
   */
  protobuf_c_boolean has_status;
  int32_t status;
  /*
   * 电池电压: 毫伏
   */
  protobuf_c_boolean has_batteryvoltage;
  int32_t batteryvoltage;
  /*
   * 电池电量: 百分比
   */
  protobuf_c_boolean has_batterypower;
  int32_t batterypower;
  /*
   * 信号强度
   */
  protobuf_c_boolean has_signalstrength;
  int32_t signalstrength;
  /*
   * 误码率
   */
  protobuf_c_boolean has_biterrorrate;
  int32_t biterrorrate;
  /*
   * 网络类型
   */
  protobuf_c_boolean has_radioaccesstechnology;
  int32_t radioaccesstechnology;
  /*
   * 运营商代码
   */
  protobuf_c_boolean has_networkoperator;
  uint32_t networkoperator;
};
extern char protocol__register_req__imei__default_value[];
extern char protocol__register_req__mac__default_value[];
#define PROTOCOL__REGISTER_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__register_req__descriptor) \
    , NULL, NULL, protocol__register_req__imei__default_value, protocol__register_req__mac__default_value, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0u }


struct  _Protocol__RegisterRsp
{
  ProtobufCMessage base;
  Protocol__IdentityMsg *iden;
  /*
   * UTC时间戳，校时用
   */
  uint32_t timestamp;
  /*
   * SIM卡类型
   */
  protobuf_c_boolean has_simtype;
  int32_t simtype;
};
#define PROTOCOL__REGISTER_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__register_rsp__descriptor) \
    , NULL, 0, 0, 0 }


/* Protocol__RegisterReq methods */
void   protocol__register_req__init
                     (Protocol__RegisterReq         *message);
size_t protocol__register_req__get_packed_size
                     (const Protocol__RegisterReq   *message);
size_t protocol__register_req__pack
                     (const Protocol__RegisterReq   *message,
                      uint8_t             *out);
size_t protocol__register_req__pack_to_buffer
                     (const Protocol__RegisterReq   *message,
                      ProtobufCBuffer     *buffer);
Protocol__RegisterReq *
       protocol__register_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__register_req__free_unpacked
                     (Protocol__RegisterReq *message,
                      ProtobufCAllocator *allocator);
/* Protocol__RegisterRsp methods */
void   protocol__register_rsp__init
                     (Protocol__RegisterRsp         *message);
size_t protocol__register_rsp__get_packed_size
                     (const Protocol__RegisterRsp   *message);
size_t protocol__register_rsp__pack
                     (const Protocol__RegisterRsp   *message,
                      uint8_t             *out);
size_t protocol__register_rsp__pack_to_buffer
                     (const Protocol__RegisterRsp   *message,
                      ProtobufCBuffer     *buffer);
Protocol__RegisterRsp *
       protocol__register_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__register_rsp__free_unpacked
                     (Protocol__RegisterRsp *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Protocol__RegisterReq_Closure)
                 (const Protocol__RegisterReq *message,
                  void *closure_data);
typedef void (*Protocol__RegisterRsp_Closure)
                 (const Protocol__RegisterRsp *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor protocol__register_req__descriptor;
extern const ProtobufCMessageDescriptor protocol__register_rsp__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_Register_2eproto__INCLUDED */
