/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: SMS.proto */

#ifndef PROTOBUF_C_SMS_2eproto__INCLUDED
#define PROTOBUF_C_SMS_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "IdentityMsg.pb-c.h"
#include "GPS.pb-c.h"
#include "Env.pb-c.h"
#include "Cellular.pb-c.h"

typedef struct _Protocol__SMSMsg Protocol__SMSMsg;
typedef struct _Protocol__SMSRply Protocol__SMSRply;


/* --- enums --- */


/* --- messages --- */

/*
 * 服务器(通过短信网关)或手机(上的业务App)发送短信请求设备执行指定动作
 * 发送前必须做Base64编码
 */
struct  _Protocol__SMSMsg
{
  ProtobufCMessage base;
  Protocol__IdentityMsg *iden;
  /*
   * 服务器地址(IP或域名)
   */
  char *serverhost;
  /*
   * 服务器端口
   */
  protobuf_c_boolean has_serverport;
  int32_t serverport;
  /*
   * GPS请求: 0 - 无动作, 1 - 定位一次, 2 - 持续开启
   */
  protobuf_c_boolean has_gpsaction;
  int32_t gpsaction;
  /*
   * 发送短信回复
   */
  protobuf_c_boolean has_sendsms;
  protobuf_c_boolean sendsms;
  /*
   * 网络回复直到成功
   */
  protobuf_c_boolean has_connectserver;
  protobuf_c_boolean connectserver;
  /*
   * 网络回复尝试间隔
   */
  protobuf_c_boolean has_connectinterval;
  protobuf_c_boolean connectinterval;
  /*
   * 网络回复尝试超时
   */
  protobuf_c_boolean has_connecttimeout;
  int32_t connecttimeout;
  /*
   * 保持在线
   */
  protobuf_c_boolean has_keeponline;
  protobuf_c_boolean keeponline;
  /*
   * 保持在线超时
   */
  protobuf_c_boolean has_keeponlinetimeout;
  int32_t keeponlinetimeout;
};
extern char protocol__smsmsg__server_host__default_value[];
#define PROTOCOL__SMSMSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__smsmsg__descriptor) \
    , NULL, protocol__smsmsg__server_host__default_value, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * 设备通过短信或者数据通道回应短信请求
 * 短信通道发送前必须做Base64编码
 */
struct  _Protocol__SMSRply
{
  ProtobufCMessage base;
  Protocol__IdentityMsg *iden;
  /*
   * 收到短信的时间
   */
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  /*
   * 发送短信的电话号码
   */
  char *peerphonenumber;
  /*
   * 设备位置信息: 节选, 必填经纬度
   */
  Protocol__GPS *gpsinfo;
  /*
   * 设备环境信息: 节选, 必填电池电量
   */
  Protocol__Env *envinfo;
  /*
   * 基站信息: 节选, 必填信号强度
   */
  Protocol__Cellular *cellularinfo;
};
extern char protocol__smsrply__peer_phone_number__default_value[];
#define PROTOCOL__SMSRPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__smsrply__descriptor) \
    , NULL, 0, 0u, protocol__smsrply__peer_phone_number__default_value, NULL, NULL, NULL }


/* Protocol__SMSMsg methods */
void   protocol__smsmsg__init
                     (Protocol__SMSMsg         *message);
size_t protocol__smsmsg__get_packed_size
                     (const Protocol__SMSMsg   *message);
size_t protocol__smsmsg__pack
                     (const Protocol__SMSMsg   *message,
                      uint8_t             *out);
size_t protocol__smsmsg__pack_to_buffer
                     (const Protocol__SMSMsg   *message,
                      ProtobufCBuffer     *buffer);
Protocol__SMSMsg *
       protocol__smsmsg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__smsmsg__free_unpacked
                     (Protocol__SMSMsg *message,
                      ProtobufCAllocator *allocator);
/* Protocol__SMSRply methods */
void   protocol__smsrply__init
                     (Protocol__SMSRply         *message);
size_t protocol__smsrply__get_packed_size
                     (const Protocol__SMSRply   *message);
size_t protocol__smsrply__pack
                     (const Protocol__SMSRply   *message,
                      uint8_t             *out);
size_t protocol__smsrply__pack_to_buffer
                     (const Protocol__SMSRply   *message,
                      ProtobufCBuffer     *buffer);
Protocol__SMSRply *
       protocol__smsrply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__smsrply__free_unpacked
                     (Protocol__SMSRply *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Protocol__SMSMsg_Closure)
                 (const Protocol__SMSMsg *message,
                  void *closure_data);
typedef void (*Protocol__SMSRply_Closure)
                 (const Protocol__SMSRply *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor protocol__smsmsg__descriptor;
extern const ProtobufCMessageDescriptor protocol__smsrply__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_SMS_2eproto__INCLUDED */
